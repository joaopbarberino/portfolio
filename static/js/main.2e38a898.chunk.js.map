{"version":3,"sources":["helpers/styles.js","components/AppContext.js","components/Header.js","components/HomeButton.js","sections/Home.js","App.js","serviceWorker.js","index.js"],"names":["colors","breakpoints","AppContext","React","createContext","AppProvider","Provider","Consumer","StyledNavbarContainer","styled","Container","StyledNavbarToggler","div","Header","useContext","language","toggleLanguage","mobile","useState","isOpen","setIsOpen","toggle","fluid","Navbar","color","expand","fixed","onClick","className","Collapse","navbar","Nav","data","header","map","nav","key","NavItem","NavLink","href","link","text","transition","StyledButton","a","HomeButton","props","role","icon","faLongArrowAltRight","StyledHomeContainer","StyledProfilePicContainer","StyledDescription","Home","id","title","home","imgTitle","alt","src","process","description","ReactHtmlParser","button","StyledBody","App","setLanguage","setMobile","resize","newState","window","innerWidth","parseInt","useEffect","addEventListener","removeEventListener","value","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0KAAaA,EACH,UADGA,EAEF,UAFEA,EAGH,UAHGA,EAIE,UAJFA,EAKC,UAGDC,EACE,Q,8DCPTC,EAAaC,IAAMC,gBAEZC,EAAcH,EAAWI,SAGvBJ,GAFYA,EAAWK,SAEvBL,G,u2CCOf,IAAMM,EAAwBC,YAAOC,IAAPD,CAAH,IAGHT,EAQLA,EAQAA,EAGSA,EAaGA,GAIzBW,EAAsBF,IAAOG,IAAV,IACFX,EAOGD,GAiFXa,EArDA,WAAO,IAAD,EAC0BC,qBAAWZ,GAAhDa,EADW,EACXA,SAAUC,EADC,EACDA,eAAgBC,EADf,EACeA,OADf,EAGSC,oBAAS,GAHlB,mBAGZC,EAHY,KAGJC,EAHI,KAKbC,EAAS,mBAAMJ,GAASG,GAAWD,IAEzC,OACE,kBAACX,EAAD,CAAuBc,OAAK,GAC1B,kBAACC,EAAA,EAAD,CAAQC,MAAOxB,EAAayB,OAAO,KAAKC,MAAM,OAC5C,kBAAChB,EAAA,EAAD,KACE,kBAACC,EAAD,CAAqBgB,QAASN,GAC5B,yBAAKO,UAAWT,EAAS,aAAe,SACxC,yBAAKS,UAAWT,EAAS,GAAK,SAC9B,yBAAKS,UAAWT,EAAS,aAAe,UAG1C,kBAACU,EAAA,EAAD,CAAUV,OAAQA,EAAQW,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKH,UAAU,gCAAgCE,QAAM,GAEjDE,EAAKjB,GAAUkB,OAAOC,KAAI,SAACC,EAAKC,GAC9B,OACE,kBAACC,EAAA,EAAD,CAASD,IAAKA,GACZ,kBAACE,EAAA,EAAD,CAASC,KAAMJ,EAAIK,KAAMb,QAASN,GAASc,EAAIM,UAMvD,kBAACJ,EAAA,EAAD,CACET,UAAU,oBACVD,QAAS,kBAAMX,MAEf,kBAACsB,EAAA,EAAD,CAASC,KAAK,aACE,OAAbxB,EAAoB,KAAO,SAKpC,kBAACsB,EAAA,EAAD,CACET,UAAU,mCACVD,QAAS,kBAAMX,MAEf,kBAACsB,EAAA,EAAD,CAASC,KAAK,aACE,OAAbxB,EAAoB,KAAO,W,klDC7H1C,IACM2B,EAAU,cADF,MACE,8CAEVC,EAAelC,IAAOmC,EAAV,IAEG5C,EAKXA,EASK0C,EAiBCA,EAIO1C,EAYP0C,EAKCA,EAzDH,MAoFG1C,EACWA,GAuBb6C,EAXI,SAAAC,GACf,OACI,kBAACH,EAAD,CAAcJ,KAAK,IAAIQ,KAAK,UACxB,8BAAOD,EAAML,MACb,yBAAKb,UAAU,QACX,kBAAC,IAAD,CAAiBoB,KAAMC,S,wpCCrGvC,IAAMC,EAAsBzC,YAAOC,IAAPD,CAAH,IAEZT,GAKPmD,EAA4B1C,IAAOG,IAAV,IAWHZ,EAWAA,EAQHC,GAanBmD,EAAoB3C,IAAOG,IAAV,IAQNZ,GA+BFqD,EA3BF,WAAO,IACRtC,EAAaD,qBAAWZ,GAAxBa,SAER,OACI,kBAACmC,EAAD,CAAqBI,GAAG,QACpB,kBAACH,EAAD,KACI,8BACA,yBACII,MAAOvB,EAAKjB,GAAUyC,KAAKC,SAC3BC,IAAK1B,EAAKjB,GAAUyC,KAAKC,SACzBE,IAAKC,gCAGb,kBAACR,EAAD,KACKpB,EAAKjB,GAAUyC,KAAKK,YAAY3B,KAAI,SAACO,EAAML,GACxC,OACI,uBAAGA,IAAKA,GACH0B,IAAgBrB,QAKjC,kBAAC,EAAD,CAAYA,KAAMT,EAAKjB,GAAUyC,KAAKO,W,mHCnFlD,IAAMC,EAAavD,IAAOG,IAAV,IACMZ,GAqCPiE,MAjCf,WAAgB,IAAD,EACmB/C,mBAAS,MAD5B,mBACNH,EADM,KACImD,EADJ,OAEehD,oBAAS,GAFxB,mBAEND,EAFM,KAEEkD,EAFF,KAOPC,EAAS,WACb,IAAMC,EAAWC,OAAOC,YAAcC,SAASvE,GAC3CgB,IAAWoD,GACbF,EAAUE,IAad,OATAI,qBAAU,WAIR,OAHAL,IACAE,OAAOI,iBAAiB,SAAUN,GAE3B,WACLE,OAAOK,oBAAoB,SAAUP,OAKvC,kBAAC/D,EAAD,CAAauE,MAAO,CAAE7D,WAAUC,eArBX,WACrBkD,GAAY,SAAAnD,GAAQ,MAAkB,OAAbA,EAAoB,KAAO,SAoBJE,WAC9C,kBAAC+C,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SC9BYa,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2e38a898.chunk.js","sourcesContent":["export const colors = {\r\n    dark: '#252525',\r\n    light: '#f7f7f7',\r\n    pink: '#af1d57',\r\n    lightPink: '#c04c7a',\r\n    darkPink: '#6e1337'\r\n}\r\n\r\nexport const breakpoints = {\r\n    mobileMax: '767px', \r\n}","import React from 'react';\n\nconst AppContext = React.createContext();\n\nexport const AppProvider = AppContext.Provider;\nexport const AppConsumer = AppContext.Consumer;\n\nexport default AppContext;","import React, { useState, useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Container\r\n} from 'reactstrap';\r\nimport AppContext from './AppContext';\r\nimport data from '../helpers/data.json';\r\nimport { colors, breakpoints } from '../helpers/styles';\r\n\r\nconst StyledNavbarContainer = styled(Container)`\r\n  font-family: 'Quicksand', sans-serif;\r\n  .navbar {\r\n    background-color: ${colors.dark};\r\n    padding: 0;\r\n\r\n    .nav-item {\r\n      transition: all .2s;\r\n      padding: 15px 20px;\r\n      \r\n      a {\r\n          color: ${colors.pink}; \r\n          font-size: 14pt;\r\n      }\r\n      \r\n      &:hover:not(.mobile-language-button) {\r\n        padding: 20px 25px;\r\n\r\n        a {\r\n          color: ${colors.light};\r\n          font-size: 16pt;\r\n        }\r\n        background-color: ${colors.pink};\r\n      }\r\n    }\r\n\r\n    .mobile-language-button {\r\n      position: absolute;\r\n      right: 0;\r\n      top: 0;\r\n      list-style: none;\r\n    }\r\n  }\r\n\r\n  .navbar {\r\n    border-bottom: 2px solid ${colors.pink};\r\n  }\r\n`;\r\n\r\nconst StyledNavbarToggler = styled.div`\r\n  @media (max-width: ${breakpoints.mobileMax}) {\r\n    margin: 20px;\r\n    padding-top: 5px;\r\n    cursor: pointer;\r\n\r\n    div {\r\n      transition: all 0.3s;\r\n      background-color: ${colors.pink};\r\n    }\r\n\r\n    .bar1, .bar2, .bar3 {\r\n      width: 30px;\r\n      height: 2px;\r\n      margin-bottom: 8px;\r\n    }\r\n\r\n    .animation1, .animation3 {\r\n      width: 30px;\r\n      height: 2px;\r\n    }\r\n\r\n    .animation1 {\r\n      margin-top: 5px;\r\n      margin-bottom: 10px;\r\n      transform: rotate(45deg);\r\n    }\r\n\r\n    .animation3 {\r\n      margin-top: -12px;\r\n      margin-bottom: 4px;\r\n      transform: rotate(-45deg);\r\n    }\r\n  }\r\n`;\r\n\r\nconst Header = () => {\r\n  const { language, toggleLanguage, mobile } = useContext(AppContext);\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => mobile ? setIsOpen(!isOpen) : false;\r\n\r\n  return (\r\n    <StyledNavbarContainer fluid>\r\n      <Navbar color={colors.dark} expand='md' fixed='top'>\r\n        <Container>\r\n          <StyledNavbarToggler onClick={toggle}>\r\n            <div className={isOpen ? 'animation1' : 'bar1'} />\r\n            <div className={isOpen ? '' : 'bar2'} />\r\n            <div className={isOpen ? 'animation3' : 'bar3'} />\r\n          </StyledNavbarToggler>\r\n\r\n          <Collapse isOpen={isOpen} navbar>\r\n            <Nav className='w-100 justify-content-between' navbar>\r\n              {\r\n                data[language].header.map((nav, key) => {\r\n                  return (\r\n                    <NavItem key={key}>\r\n                      <NavLink href={nav.link} onClick={toggle}>{nav.text}</NavLink>\r\n                    </NavItem>\r\n                  );\r\n                })\r\n              }\r\n\r\n              <NavItem\r\n                className='d-none d-md-block'\r\n                onClick={() => toggleLanguage()}\r\n              >\r\n                <NavLink href='#projects'>\r\n                  {language === 'en' ? 'PT' : 'EN'}\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n          <NavItem\r\n            className='d-md-none mobile-language-button'\r\n            onClick={() => toggleLanguage()}\r\n          >\r\n            <NavLink href='#projects'>\r\n              {language === 'en' ? 'PT' : 'EN'}\r\n            </NavLink>\r\n          </NavItem>\r\n        </Container>\r\n      </Navbar>\r\n    </StyledNavbarContainer>\r\n  );\r\n}\r\n\r\nexport default Header;","// Adptade from: https://codepen.io/Shtam3x/pen/Bevpxd\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { colors } from '../helpers/styles'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLongArrowAltRight } from '@fortawesome/free-solid-svg-icons';\n\nconst speed = '.3s';\nconst transition = `all ${ speed } cubic-bezier(0.310, -0.105, 0.430, 1.400)`;\n\nconst StyledButton = styled.a`\n\tdisplay: block;\n\tbackground-color: ${colors.darkPink};\n\twidth: 300px;\n\theight: 70px;\n\tline-height: 70px;\n\tmargin: 75px auto;\n\tcolor: ${colors.light};\n\tposition: relative;\n\ttop: 0;\n\tbottom: 0;\n\tleft: 0;\n\tright: 0;\n\tcursor: pointer;\n\toverflow: hidden;\n\t/* box-shadow: 0 0 20px 0 rgba(0,0,0,.3); */\n\ttransition: ${transition};\n\t\n\tspan,\n\t.icon {\n\t\tdisplay: block;\n\t\theight: 100%;\n\t\ttext-align: center;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t}\n\t\n\tspan {\n\t\twidth: 72%;\n\t\tline-height: inherit;\n\t\tfont-size: 22px;\n\t\ttext-transform: uppercase;\n\t\tleft: 0;\n\t\ttransition: ${transition};\n\t\t\n\t\t&:after {\n\t\t\tcontent: '';\n\t\t\tbackground-color: ${colors.pink};\n\t\t\twidth: 2px;\n\t\t\theight: 70%;\n\t\t\tposition: absolute;\n\t\t\ttop: 15%;\n\t\t\tright: -1px;\n\t\t}\n\t}\n\t\n\t.icon {\n\t\twidth: 28%;\n\t\tright: 0;\n\t\ttransition: ${transition};\n\t\t\n\t\t.svg-inline--fa {\n\t\t\tfont-size: 30px;\n\t\t\tvertical-align: middle;\n\t\t\ttransition: ${transition}, height ${speed} ease;\n\t\t}\n\t\t\n\t\t.fa-long-arrow-alt-right {\n\t\t\theight: 36px;\n\t\t}\n\t}\n\t\n\t&:hover {\n\t\t\n\t\tspan {\n\t\t\tleft: -72%;\n\t\t\topacity: 0;\n\t\t}\n\t\t\n\t\t.icon {\n\t\t\twidth: 100%;\n\t\t\t\n\t\t\t.svg-inline--fa {\n\t\t\t\tfont-size: 45px;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t&:hover {\n\tbox-shadow: 0 0 20px 0 rgba(0,0,0,.3);\n\t\t/* opacity: .7; */\n        color: ${colors.light};\n        background-color: ${colors.pink};\n        \n\t\t.icon .fa-long-arrow-alt-right {\n\t\t\theight: 46px;\n\t\t}\n\t}\n\t\n\t&:active {\n\t\topacity: 1;\n\t}\n`;\n\nconst HomeButton = props => {\n    return (\n        <StyledButton href='#' role='button'>\n            <span>{props.text}</span>\n            <div className='icon'>\n                <FontAwesomeIcon icon={faLongArrowAltRight} />\n            </div>\n        </StyledButton>\n    )\n}\n\nexport default HomeButton;","import React, { useContext } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\nimport styled from 'styled-components';\nimport { colors, breakpoints } from '../helpers/styles';\nimport data from '../helpers/data.json';\nimport { Container } from 'reactstrap';\nimport AppContext from '../components/AppContext';\nimport HomeButton from '../components/HomeButton';\n\nconst StyledHomeContainer = styled(Container)`\n    text-align: center;\n    color: ${colors.light};\n    font-family: 'Quicksand', sans-serif;\n    font-size: 16pt;\n`;\n\nconst StyledProfilePicContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding-top: 150px;\n\n    div {\n        transition: all .2s;\n        position: absolute;\n        height: 260px;\n        width: 500px;\n        background-color: ${colors.pink};\n\n        &:hover {\n            width: 600px;\n        }\n    }\n\n    img {\n        transition: all .2s;\n        position: relative;\n        width: 300px;\n        border: 5px solid ${colors.pink};\n        border-radius: 4px;\n\n        &:hover {\n            width: 350px;\n        }\n    }\n\n    @media (max-width: ${breakpoints.mobileMax}) {\n        div, div:hover {\n            top: 0;\n            width: 100%;\n            height: 320px;\n        }\n\n        img:hover {\n            width: 300px;\n        }\n    }\n`;\n\nconst StyledDescription = styled.div`\n    margin-top: 70px;\n\n    p {\n        margin: 0;\n    }\n\n    span {\n        color: ${colors.lightPink};\n    }\n`;\n\nconst Home = () => {\n    const { language } = useContext(AppContext);\n\n    return (\n        <StyledHomeContainer id='home'>\n            <StyledProfilePicContainer>\n                <div></div>\n                <img\n                    title={data[language].home.imgTitle}\n                    alt={data[language].home.imgTitle}\n                    src={process.env.PUBLIC_URL + '/img/profile.jpg'}\n                />\n            </StyledProfilePicContainer>\n            <StyledDescription>\n                {data[language].home.description.map((text, key) => {\n                    return (\n                        <p key={key}>\n                            {ReactHtmlParser(text)}\n                        </p>\n                    );\n                })}\n            </StyledDescription>\n            <HomeButton text={data[language].home.button} />\n        </StyledHomeContainer>\n    );\n}\n\nexport default Home;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { colors, breakpoints } from './helpers/styles';\nimport './index.scss'\n\nimport Header from './components/Header';\nimport { AppProvider } from './components/AppContext';\n\nimport Home from './sections/Home';\n\nconst StyledBody = styled.div`\n  background-color: ${colors.dark};\n  height: 200vh;\n`;\n\nfunction App() {\n  const [language, setLanguage] = useState('en');\n  const [mobile, setMobile] = useState(true);\n  const toggleLanguage = () => {\n    setLanguage(language => (language === 'en' ? 'pt' : 'en'));\n  }\n\n  const resize = () => {\n    const newState = window.innerWidth <= parseInt(breakpoints.mobileMax);\n    if (mobile !== newState) {\n      setMobile(newState);\n    }\n  }\n\n  useEffect(() => {\n    resize();\n    window.addEventListener('resize', resize);\n\n    return function cleanup() {\n      window.removeEventListener('resize', resize);\n    }\n  });\n\n  return (\n    <AppProvider value={{ language, toggleLanguage, mobile }}>\n      <StyledBody>\n        <Header />\n        <Home />\n      </StyledBody>\n    </AppProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}